package com.sokima.weather.telegram.service;

import com.sokima.weather.proto.WeatherReport;
import org.springframework.stereotype.Service;

@Service
public class TableWeatherReportService {

    // Generated by ChatGPT.
    // How would you assess it?)
    public String makeTable(WeatherReport weatherReport) {
        final String temperatureLabel = "Temperature:";
        final String feelsLikeLabel = "Feels Like:";
        final String conditionLabel = "Condition:";
        final String windLabel = "Wind:";
        final String pressureLabel = "Pressure:";
        final String precipitationLabel = "Precipitation:";
        final String humidityLabel = "Humidity:";
        final String isDayLabel = "Is Day:";

        final String topicLabel = "Weather Report";

        final int maxLeftSideStringLength = Math.max(
                Math.max(
                        Math.max(
                                Math.max(
                                        temperatureLabel.length(),
                                        feelsLikeLabel.length()
                                ),
                                Math.max(
                                        conditionLabel.length(),
                                        windLabel.length()
                                )
                        ),
                        Math.max(
                                Math.max(
                                        pressureLabel.length(),
                                        precipitationLabel.length()
                                ),
                                Math.max(
                                        humidityLabel.length(),
                                        isDayLabel.length()
                                )
                        )
                ),
                topicLabel.length()
        );

        final String temperatureValue = String.format("%.1f°C", weatherReport.getTemperatureCelsius());
        final String feelsLikeValue = String.format("%.1f°C", weatherReport.getFeelsLikeCelsius());
        final String conditionValue = weatherReport.getCondition();
        final String windValue = String.format("%.1f kph", weatherReport.getWindKph());
        final String pressureValue = String.format("%.1f mb", weatherReport.getPressureMb());
        final String precipitationValue = String.format("%.1f mm", weatherReport.getPrecipitationMm());
        final String humidityValue = String.format("%d%%", weatherReport.getHumidity());
        final String isDayValue = String.format(weatherReport.getIsDay() ? "Yes" : "No");

        final int maxRightSideStringLength = Math.max(
                Math.max(
                        Math.max(
                                temperatureValue.length(),
                                feelsLikeValue.length()
                        ),
                        Math.max(
                                conditionValue.length(),
                                windValue.length()
                        )
                ),
                Math.max(
                        Math.max(
                                pressureValue.length(),
                                precipitationValue.length()
                        ),
                        Math.max(
                                humidityValue.length(),
                                isDayValue.length()
                        )

                )
        );

        final int entrySpaceLength = 3;
        final String horizontalLine = "═".repeat(2 + maxLeftSideStringLength + 2*entrySpaceLength + maxRightSideStringLength);

        StringBuilder sb = new StringBuilder();

        sb
                .append("<pre>")
                // horizontal line #1
                .append("╔").append(horizontalLine).append("╗\n")
                // topic label
                .append(String.format("║ %-" + (maxLeftSideStringLength + 2*entrySpaceLength + maxRightSideStringLength) + "s ║\n", topicLabel))
                // horizontal line #2
                .append("╠").append(horizontalLine).append("╣\n")
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", temperatureLabel, temperatureValue))
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", feelsLikeLabel, feelsLikeValue))
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", conditionLabel, conditionValue))
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", windLabel, windValue))
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", pressureLabel, pressureValue))
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", precipitationLabel, precipitationValue))
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", humidityLabel, humidityValue))
                .append(String.format("║ %-" + (maxLeftSideStringLength + entrySpaceLength) + "s   %-" + (maxRightSideStringLength) + "s ║\n", isDayLabel, isDayValue))
                // horizontal line #10
                .append("╚").append(horizontalLine).append("╝\n")
                .append("</pre>");

        return sb.toString();
    }
}
